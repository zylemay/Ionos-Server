---
import { Image } from "astro:assets";
import advertisingSvg from "@assets/images/services/advertising.svg?raw";
import designSvg from "@assets/images/services/creative-designer-doing-multitasking.svg?raw";
import mobileSvg from "@assets/images/services/mobile-app-ui-ux-design.svg?raw";
import seoSvg from "@assets/images/services/seo-link-building.svg?raw";
import websiteSvg from "@assets/images/services/website-ui-ux-development.svg?raw";
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const { class: className } = Astro.props;

const points = [
	{
		title: t("websites.title"),
		content: t("websites.content"),
		image: websiteSvg,
	},
	{
		title: t("apps.title"),
		content: t("apps.content"),
		image: mobileSvg,
	},
	{
		title: t("uiux.title"),
		content: t("uiux.content"),
		image: designSvg,
	},
	{
		title: t("seo.title"),
		content: t("seo.content"),
		image: seoSvg,
	},
	{
		title: t("advertising.title"),
		content: t("advertising.content"),
		image: advertisingSvg,
	},
];
---

<section id="services" class:list={["section home-dark-section services-section relative", className]}>
	<div class="wrapper col-span-12 h-screen w-full">
		<h2 class="sr-only">{t("services")}</h2>
		<div class="indicators absolute left-0 top-0 mt-[10vh] hidden h-[80vh] w-1 flex-col justify-between gap-2">
			{points.map(() => <div class="indicator w-full grow bg-[#333333]" />)}
		</div>
		{
			points.map(({ title, content, image }) => (
				<div class="point flex h-screen w-full flex-col items-center justify-center gap-x-20 gap-y-12 p-16 pr-0 md:flex-row lg:gap-x-40">
					<div class="hidden w-full max-w-80 lg:block">
						<Fragment set:html={image} class="" />
					</div>
					<article class="flex flex-col gap-14">
						<h3 class="faq font-display text-4xl uppercase md:text-5xl lg:text-6xl">{title}</h3>
						<p class="max-w-2xl text-lg" set:html={content} />
					</article>
				</div>
			))
		}
	</div>
</section>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	import { MorphSVGPlugin } from "gsap/MorphSVGPlugin";

	gsap.registerPlugin(ScrollTrigger, MorphSVGPlugin);

	function init() {
		var points = gsap.utils.toArray(".point") as gsap.DOMTarget[];
		var indicators = gsap.utils.toArray(".indicator") as gsap.DOMTarget[];

		var height = 100 * points.length;

		gsap.set(".indicators", { display: "flex" });

		var tl = gsap.timeline({
			duration: points.length,
			scrollTrigger: {
				trigger: "#services",
				start: "top center",
				end: "+=" + height + "%",
				scrub: 0.5,
				markers: false,
				id: "points",
				immediateRender: false,
			},
		});

		var pinner = gsap.timeline({
			scrollTrigger: {
				trigger: ".services-section .wrapper",
				start: "top top",
				end: "+=" + height + "%",
				scrub: 0.5,
				pin: ".services-section .wrapper",
				pinSpacing: true,
				id: "pinning",
				markers: false,
				snap: {
					snapTo: [0, 0.25, 0.5, 0.7, 0.9], // snap to the closest label in the timeline
					duration: { min: 0.1, max: 0.1 }, // the snap animation should be at least 0.2 seconds, but no more than 3 seconds (determined by velocity)
					delay: 1, // wait 1 seconds from the last scroll event before doing the snapping
					inertia: false,
					directional: false,
					ease: "power1.inOut", // the ease of the snap animation ("power3" by default)
				},
			},
		});

		points.forEach(function (elem, i) {
			gsap.set(elem, { position: "absolute", top: 0 });

			// https://codepen.io/zank/pen/oNVjYMM?editors=0010
			tl.to(indicators[i], { backgroundColor: "white", duration: 0.25 }, i);
			tl.from((elem as HTMLElement).querySelector("svg"), { autoAlpha: 0 }, i);
			tl.from((elem as HTMLElement).querySelector("article"), { autoAlpha: 0, translateY: 100 }, i);

			if (i != points.length - 1) {
				tl.to(indicators[i], { backgroundColor: "#333333", duration: 0.25 }, i + 0.75);
				tl.to((elem as HTMLElement).querySelector("article"), { autoAlpha: 0, translateY: -100 }, i + 0.75);
				tl.to((elem as HTMLElement).querySelector("svg"), { autoAlpha: 0 }, i + 0.75);
			}
		});
	}

	document.removeEventListener("DOMContentLoaded", init); // astro:page-load
	document.addEventListener("DOMContentLoaded", init); // astro:page-load
</script>
